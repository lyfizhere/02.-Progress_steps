@import url("https://fonts.googleapis.com/css?family=Muli&display=swap");

:root {
  --line-border-fill: #3498db;
  --line-border-empty: #e0e0e0;
}

/*Custom properties (sometimes referred to as CSS variables or cascading variables) are entities defined by CSS authors that contain specific values to be reused throughout a document. They are set using custom property notation (e.g., --main-color: black;) and are accessed using the var() function (e.g., color: var(--main-color);). */

* {
  box-sizing: border-box;
}

body {
  background-color: #f6f7fb;
  font-family: "Muli", sans-serif;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100vh;
  overflow: hidden;
  margin: 0;
}

.container {
  text-align: center;
}

.progress-container {
  display: flex;
  justify-content: space-between;
  position: relative; /* We are going to position it relative so that we can position inside of it absolute. */
  margin-bottom: 30px;
  max-width: 100%;
  width: 350px;
}
.progress-container::before {
  content: "";
  /*The ::before selector inserts something before the content of each selected element(s). */
  background-color: var(--line-border-empty);
  position: absolute;
  top: 50%;
  left: 0;
  transform: translateY(-50%);
  /* translateY(n): It is used to transform the element along Y-axis. */
  height: 4px;
  width: 100%;
  z-index: -1;
  /*It defines the element's order if they overlap each other. */
}

.progress {
  background-color: var(--line-border-fill);
  position: absolute;
  top: 50%;
  left: 0;
  transform: translateY(-50%);
  /* translateY(n): It is used to transform the element along Y-axis. */
  height: 4px;
  width: 0%;
  z-index: -1;
  /*It defines the element's order if they overlap each other. */
  transition: 0.4s ease;
}

.circle {
  background-color: #fff;
  color: #999;
  border-radius: 50%;
  height: 30px;
  width: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 3px solid var(--line-border-empty);
  transition: 0.4s ease;
}

.circle.active {
  border-color: var(--line-border-fill);
}

.btn {
  background-color: var(--line-border-fill);
  color: #fff;
  border: 0;
  border-radius: 6px;
  cursor: pointer;
  font-family: inherit;
  padding: 8px 30px;
  margin: 5px;
  font-size: 14px;
}

.btn:active {
  transform: scale(0.98);
  /*When we click the button we that little effect. */
}

.btn:focus {
  outline: 0;
  /* button, when it's in focus state, we want to set the outline to zero or none.  */
}

.btn:disabled {
  background-color: var(--line-border-empty);
  cursor: not-allowed;
}
